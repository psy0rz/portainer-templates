#NOTE: expects 8Gb of ram.
#set vm.max_map_count=1024000 in /etc/sysctl.conf
#(dont forget to enable sysctl service to boot)

# traefik:80 --> varnish:80 ->  nginx:8080 -> fpm:9000

services:

  #if varnish is stopped, then traefik will directly connect to web container (prio=2 vs prio=1)  
  #NOTE: if you start this container, make sure you change the full page cache to varnish in the magento backend.
  #(it will work otherwise but it will be slower)
  varnish:
    image: magento/magento-cloud-docker-varnish:${VARNISH_VERSION}

    labels:
      - traefik.enable=true
    
      
      #https
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-varnish.entrypoints=websecure
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-varnish.rule=${TRAEFIK_RULE}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-varnish.tls.certresolver=myzerossl 
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-varnish.tls=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-varnish.priority=2
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-varnish.loadbalancer.server.port=80

    networks:
      - proxynet
      - default


    depends_on: 
      - web

  web:
    image: magento/magento-cloud-docker-nginx:${NGINX_VERSION}
      
    volumes:
      - magento:/app

    ports:
     - 127.0.0.1:${HTTP_PORT}:8080
    
    
    environment:
     - MAGENTO_RUN_MODE=${MAGENTO_RUN_MODE}

    labels:
      - traefik.enable=true
    
      
      #https
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.entrypoints=websecure
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.rule=${TRAEFIK_RULE}
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.tls.certresolver=myzerossl 
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.tls=true
      - traefik.http.routers.${COMPOSE_PROJECT_NAME}-web.priority=1
      - traefik.http.services.${COMPOSE_PROJECT_NAME}-web.loadbalancer.server.port=8080

    networks:
      - proxynet
      - default

    restart: unless-stopped
    stop_grace_period: 0s

    depends_on: 
     - fpm

  fpm:
    image: magento/magento-cloud-docker-php:${FPM_VERSION}

    environment:
     - MAGENTO_RUN_MODE=${MAGENTO_RUN_MODE}

    volumes:
     - magento:/app
     # NOTE: needed because of this bug: https://github.com/magento/magento-cloud-docker/issues/373
     - ./php-fpm.conf:/usr/local/etc/php-fpm.conf

    restart: unless-stopped
    stop_grace_period: 0s

    #imporant, without opensearch categories will be shown as empty, and cached this way as well.
    depends_on:
      opensearch:
        condition: service_healthy
      db:
        condition: service_started

  cron:
    image: magento/magento-cloud-docker-php:${CLI_VERSION}

    volumes:
     - magento:/app

    restart: unless-stopped
    environment:
      - CRONTAB=* * * * * www /usr/local/bin/php /app/bin/magento cron:run
    command: cron -f

    stop_grace_period: 0s
    depends_on:
      opensearch:
        condition: service_healthy
      db:
        condition: service_started

    

  db:
    image: mariadb:${MARIADB_VERSION}
    environment:
      - MARIADB_USER=magento
      - MARIADB_PASSWORD=magento
      - MARIADB_DATABASE=magento
      - MARIADB_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}

    volumes:
      - db:/var/lib/mysql
    restart: unless-stopped

    ports:
     - 127.0.0.1:${MYSQL_PORT}:3306


    stop_grace_period: 10s




  opensearch:
    image: magento/magento-cloud-docker-opensearch:${OPENSEARCH_VERSION}
    environment:
    #  - OPENSEARCH_INITIAL_ADMIN_PASSWORD=NkMUJR*w&9w3m7
     - cluster.name=opensearch-cluster # Name the cluster
     - node.name=node1 # Name the node that will run in this container
    #  - discovery.seed_hosts=node1
     - cluster.initial_cluster_manager_nodes=node1
    #  - bootstrap.memory_lock=true # Disable JVM heap memory swapping
    #  - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx3500m # Set min and max JVM heap sizes to at least 50% of system RAM
     - DISABLE_INSTALL_DEMO_CONFIG=true
     - DISABLE_SECURITY_PLUGIN=true
    restart: unless-stopped

    volumes:
     - opensearch:/usr/share/opensearch/data

    stop_grace_period: 0s


  smtp:
    image: mwader/postfix-relay
    environment: 
      - POSTFIX_myhostname=${POSTFIX_HOSTNAME}

    restart: unless-stopped
    stop_grace_period: 0s


  ssh:
    hostname: ${COMPOSE_PROJECT_NAME}
    build:
      context: ./build/ssh
      args:
        - CLI_VERSION=${CLI_VERSION}
    environment:
       - SSH_KEY=${SSH_KEY}
    ports:
      - ${SSH_PORT}:22
    volumes:
     - ssh:/app
     - magento:/app/magento
    restart: unless-stopped
    stop_grace_period: 0s

networks:
  proxynet:
    name: proxynet

volumes:
  db:
    driver: zfs
  magento:
    driver: zfs
  opensearch:
    driver: zfs
  ssh:
    driver: zfs